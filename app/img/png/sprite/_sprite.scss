// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$fb-name: 'fb';
$fb-x: 0px;
$fb-y: 0px;
$fb-offset-x: 0px;
$fb-offset-y: 0px;
$fb-width: 22px;
$fb-height: 22px;
$fb-total-width: 45px;
$fb-total-height: 45px;
$fb-image: 'sprite.png';
$fb: (0px, 0px, 0px, 0px, 22px, 22px, 45px, 45px, 'sprite.png', 'fb', );
$im-name: 'im';
$im-x: 0px;
$im-y: 23px;
$im-offset-x: 0px;
$im-offset-y: -23px;
$im-width: 21px;
$im-height: 22px;
$im-total-width: 45px;
$im-total-height: 45px;
$im-image: 'sprite.png';
$im: (0px, 23px, 0px, -23px, 21px, 22px, 45px, 45px, 'sprite.png', 'im', );
$search-name: 'search';
$search-x: 22px;
$search-y: 23px;
$search-offset-x: -22px;
$search-offset-y: -23px;
$search-width: 19px;
$search-height: 19px;
$search-total-width: 45px;
$search-total-height: 45px;
$search-image: 'sprite.png';
$search: (22px, 23px, -22px, -23px, 19px, 19px, 45px, 45px, 'sprite.png', 'search', );
$yt-name: 'yt';
$yt-x: 23px;
$yt-y: 0px;
$yt-offset-x: -23px;
$yt-offset-y: 0px;
$yt-width: 22px;
$yt-height: 22px;
$yt-total-width: 45px;
$yt-total-height: 45px;
$yt-image: 'sprite.png';
$yt: (23px, 0px, -23px, 0px, 22px, 22px, 45px, 45px, 'sprite.png', 'yt', );
$spritesheet-width: 45px;
$spritesheet-height: 45px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($fb, $im, $search, $yt, );
$spritesheet: (45px, 45px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url('../img/png/sprite/#{$sprite-image}');
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
